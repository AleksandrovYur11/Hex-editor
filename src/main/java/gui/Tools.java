package gui;

import lombok.Getter;
import lombok.Setter;
import service.impl.ByteServiceImpl;
import service.impl.HexTableServiceImpl;

import javax.swing.*;
import java.awt.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

@Getter
@Setter
public class Tools {
    private JPanel toolBarPanel;
    private JToolBar toolBar;
    private ByteServiceImpl byteServiceImpl;
    private HexTableServiceImpl hexTableServiceImpl;

    private HexTable hexTable;  // Добавлено поле


    public Tools(HexTable hexTable) {

        this.hexTable = hexTable;  // Установка переданного HexTable
        this.byteServiceImpl = new ByteServiceImpl();
        this.hexTableServiceImpl = new HexTableServiceImpl(hexTable);


        JMenuBar menuBar = new JMenuBar();
        JMenu fileMenu = new JMenu("Файл");
        JMenuItem openItem = new JMenuItem("Открыть");
        JMenuItem saveItem = new JMenuItem("Сохранить");
        JMenuItem exitItem = new JMenuItem("Выход");

        fileMenu.add(openItem);
        fileMenu.add(saveItem);
        fileMenu.add(exitItem);
        menuBar.add(fileMenu);
        toolBar.add(menuBar, BorderLayout.WEST);

        openItem.addActionListener(actionEvent -> {
            JFileChooser fileChooser = new JFileChooser();
            int returnValue = fileChooser.showOpenDialog(null);
            if (returnValue == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                try {
                    byte[] fileBytes = byteServiceImpl.readFileToByteArray(selectedFile);
                    hexTableServiceImpl.displayHexData(fileBytes);
//                    String hexRepresentation = getHexRepresentation(fileBytes);
//                    hexTextArea.setText(hexRepresentation);
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        });

        exitItem.addActionListener(actionEvent -> System.exit(0));


//        saveItem.addActionListener(actionEvent -> {
//            JFileChooser fileChooser = new JFileChooser();
//            int returnValue = fileChooser.showSaveDialog(null);
//            if (returnValue == JFileChooser.APPROVE_OPTION) {
//                File selectedFile = fileChooser.getSelectedFile();
//                try {
//                    BufferedWriter writer = new BufferedWriter(new FileWriter(selectedFile));
//                    writer.write(hexTextArea.getText());
//                    writer.close();
//                } catch (IOException ex) {
//                    ex.printStackTrace();
//                }
//            }
//        });

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        toolBarPanel = new JPanel();
        toolBarPanel.setLayout(new BorderLayout(0, 0));
        toolBar = new JToolBar();
        toolBarPanel.add(toolBar, BorderLayout.NORTH);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return toolBarPanel;
    }


//    private ArrayList<JPanel> getPanels(){
//        ArrayList<JPanel> panels = new ArrayList<JPanel>();
//        panels.add(this.getToolBarPanel());
//        panels.add(this.table1.getTablePanel());
//        return panels;
//    }


//    private ArrayList<Component> getComponents() {
//        ArrayList<Component> components = new ArrayList<Component>();
//        components.add(this.getToolBarPanel());
//        components.add(this.getHexTable().getTablePanel());
//        return components;
//    }


}
